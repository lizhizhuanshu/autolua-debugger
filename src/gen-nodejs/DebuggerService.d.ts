//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');

import ttypes = require('./DebugService_types');
import MESSAGE_TYPE = ttypes.MESSAGE_TYPE
import ProjectInfo = ttypes.ProjectInfo
import Message = ttypes.Message

declare class Client {
    private output: thrift.TTransport;
    private pClass: thrift.TProtocol;
    private _seqid: number;

    constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

    getInfo(projectName: string): Promise<ProjectInfo>;

    getInfo(projectName: string, callback?: (error: void, response: ProjectInfo)=>void): void;

    createProject(projectName: string, feature: string, version: Int64): Promise<boolean>;

    createProject(projectName: string, feature: string, version: Int64, callback?: (error: void, response: boolean)=>void): void;

    createDirectory(projectName: string, path: string): Promise<boolean>;

    createDirectory(projectName: string, path: string, callback?: (error: void, response: boolean)=>void): void;

    updateVersion(projectName: string, version: Int64): Promise<boolean>;

    updateVersion(projectName: string, version: Int64, callback?: (error: void, response: boolean)=>void): void;

    updateFile(projectName: string, path: string, data: string): Promise<boolean>;

    updateFile(projectName: string, path: string, data: string, callback?: (error: void, response: boolean)=>void): void;

    deleteFile(projectName: string, path: string): Promise<boolean>;

    deleteFile(projectName: string, path: string, callback?: (error: void, response: boolean)=>void): void;

    deleteDirectory(projectName: string, path: string): Promise<boolean>;

    deleteDirectory(projectName: string, path: string, callback?: (error: void, response: boolean)=>void): void;

    deleteProject(projectName: string): Promise<boolean>;

    deleteProject(projectName: string, callback?: (error: void, response: boolean)=>void): void;

    executeFile(projectName: string, path: string): Promise<boolean>;

    executeFile(projectName: string, path: string, callback?: (error: void, response: boolean)=>void): void;

    interrupt(): Promise<void>;

    interrupt(callback?: (error: void, response: void)=>void): void;

    getMessage(): Promise<Message>;

    getMessage(callback?: (error: void, response: Message)=>void): void;
  }

declare class Processor {
  private _handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getInfo(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_createProject(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_createDirectory(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateVersion(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateFile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_deleteFile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_deleteDirectory(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_deleteProject(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_executeFile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_interrupt(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getMessage(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
